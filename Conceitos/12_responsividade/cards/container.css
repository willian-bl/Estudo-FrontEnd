body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.card {
    border: 2px solid #999;
    display: flex;
    flex-direction: column;
}

.card_header img {
    display: block;

    width: 100%;
    height: 100%;
    max-height: 10em;

    object-fit: cover;
    object-position: center;
}

.card_body {
    padding: 1em;
    box-sizing: border-box;
    background-color: #ccc;
    flex-grow: 1;
}

.card_btn {
    text-decoration: none;
    text-transform: uppercase;
    background-color: darkslategrey;
    padding: .75em 1em;
    color: white;
    display: inline-block;

}

.card_body p {
    margin: 0 0 1em;
}

.card_header {
    background-color: yellow;
}

/* container-type: inline-size; -> Faz com que o elemento seja tratado como um container no CSS e o inline-size faz com que a largura seja a base das media queries que faremos com esse container */
/* .card_wrapper,
main {
    container-type: inline-size; 
} */

.card_wrapper {
    /* Podemos escolher o nome de um container com o container-name (usamos esse nome quando formos fazer as media queries para ficar mais semântico e fácil de entender)*/
    /* container-name: cardWrapper; */
    container: cardWrapper / inline-size;
}

main {
    /* container-name: main; */
    container: main / inline-size;
    /* Atalho para definir um container: "container: apelido-do-container / inline-size;" */
}

/* @media screen and (min-width: 50em) { */
@container cardWrapper (min-width: 50em) { /* O @container faz com que a seleção se refira ao container do elemento  */
    .card {
        flex-direction: row;
    }

    .card_header img {
        max-height: initial;
    }
}

.cards_container {
    display: flex;
    gap: 1em;
    flex-direction: column;
}

/* @media screen and (min-width: 70em) { */
@container main (min-width: 70em) {
    .cards_container {
        flex-direction: row;
    }

    .card_wrapper {
        flex-grow: 1;
    }
}
